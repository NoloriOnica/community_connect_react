Lets focus tab by tab. Lets focus on the available tab first.

This is my profileController.js:
// src/controllers/profileController.js
const profileModel = require('../models/profileModel');

exports.getUserProfile = async (req, res) => {
  try {
    const userInfo = await profileModel.getUserInfo(req.params.id);
    res.json(userInfo);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateUserInfo = async (req, res) => {
  try {
    const updatedInfo = await profileModel.updateUserInfo(req.params.id, req.body);
    res.json(updatedInfo);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getUserStats = async (req, res) => {
  try {
    const stats = await profileModel.getUserStats(req.params.id);
    res.json(stats);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Listings endpoints
exports.getUserListings = async (req, res) => {
  try {
    const listings = await profileModel.getUserListings(req.params.id);
    res.json(listings);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getReservedListings = async (req, res) => {
  try {
    const listings = await profileModel.getListingsByStatus(req.params.id, 'reserved');
    res.json(listings);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getCurrentListings = async (req, res) => {
  try {
    const listings = await profileModel.getListingsByStatus(req.params.id, 'available');
    res.json(listings);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getCompletedListings = async (req, res) => {
  try {
    const listings = await profileModel.getListingsByStatus(req.params.id, 'completed');
    res.json(listings);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// ... other functions in profileController.js

// For reserved listings: Approve changes status to pending_completion
exports.approveListing = async (req, res) => {
    try {
      // Update status to 'pending_completion'
      const updated = await profileModel.updateListingStatus(req.params.id, 'pending_completion');
      res.json(updated);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  };
  
  // For pending_completion listings: Mark as completed
  exports.completeListing = async (req, res) => {
    try {
      // Assume the client sends completed_by in the request body
      const updated = await profileModel.completeListing(req.params.id, req.body.completed_by);
      res.json(updated);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  };
  
  // For pending_completion listings: Unreserve (go back to available)
  exports.unreserveListing = async (req, res) => {
    try {
      const updated = await profileModel.unreserveListing(req.params.id);
      res.json(updated);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  };
  

exports.rejectListing = async (req, res) => {
  try {
    const updated = await profileModel.updateListingStatus(req.params.id, 'available');
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.editListing = async (req, res) => {
  try {
    const updated = await profileModel.editListing(req.params.id, req.body);
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteListing = async (req, res) => {
  try {
    await profileModel.deleteListing(req.params.id);
    res.json({ message: 'Listing deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Requests endpoints
exports.getUserRequests = async (req, res) => {
  try {
    const requests = await profileModel.getUserRequests(req.params.id);
    res.json(requests);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getReservedRequests = async (req, res) => {
  try {
    const requests = await profileModel.getRequestsByStatus(req.params.id, 'reserved');
    res.json(requests);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getCurrentRequests = async (req, res) => {
  try {
    const requests = await profileModel.getRequestsByStatus(req.params.id, 'open');
    res.json(requests);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getCompletedRequests = async (req, res) => {
  try {
    const requests = await profileModel.getRequestsByStatus(req.params.id, 'completed');
    res.json(requests);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.approveRequest = async (req, res) => {
  try {
    const updated = await profileModel.updateRequestStatus(req.params.id, 'completed');
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.rejectRequest = async (req, res) => {
  try {
    const updated = await profileModel.updateRequestStatus(req.params.id, 'open');
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.editRequest = async (req, res) => {
  try {
    const updated = await profileModel.editRequest(req.params.id, req.body);
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteRequest = async (req, res) => {
  try {
    await profileModel.deleteRequest(req.params.id);
    res.json({ message: 'Request deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

This is my profileModel.js:
// src/models/profileModel.js
const db = require('../config/db');

exports.getUserInfo = async (userId) => {
  const result = await db.query(
    'SELECT id, username, email, phone, postal_code FROM users WHERE id = $1',
    [userId]
  );
  return result.rows[0];
};

exports.updateUserInfo = async (userId, data) => {
  const { username, email, phone, postal_code } = data;
  const result = await db.query(
    `UPDATE users SET username = COALESCE($1, username),
                       email = COALESCE($2, email),
                       phone = COALESCE($3, phone),
                       postal_code = COALESCE($4, postal_code)
     WHERE id = $5 RETURNING id, username, email, phone, postal_code`,
    [username, email, phone, postal_code, userId]
  );
  return result.rows[0];
};

exports.getUserStats = async (userId) => {
  const result = await db.query(
    'SELECT * FROM user_stats WHERE user_id = $1',
    [userId]
  );
  return result.rows[0];
};

exports.getUserListings = async (userId) => {
  const result = await db.query(`
    SELECT l.*, u.username AS poster_name, u.postal_code
    FROM listings l
    JOIN users u ON l.user_id = u.id
    WHERE l.user_id = $1
    ORDER BY l.created_at DESC
  `, [userId]);
  return result.rows;
};

exports.getListingsByStatus = async (userId, status) => {
  const result = await db.query(`
    SELECT l.*, u.username AS poster_name, u.postal_code
    FROM listings l
    JOIN users u ON l.user_id = u.id
    WHERE l.user_id = $1 AND l.status = $2
    ORDER BY l.created_at DESC
  `, [userId, status]);
  return result.rows;
};

exports.editListing = async (id, data) => {
  const { item_name, description, type, expiry_date, allergy } = data;
  const result = await db.query(
    `UPDATE listings SET 
       item_name = COALESCE($1, item_name),
       description = COALESCE($2, description),
       type = COALESCE($3, type),
       expiry_date = COALESCE($4, expiry_date),
       allergy = COALESCE($5, allergy),
       updated_at = NOW()
     WHERE id = $6 RETURNING *`,
    [item_name, description, type, expiry_date, allergy, id]
  );
  return result.rows[0];
};

exports.updateListingStatus = async (id, status) => {
  const result = await db.query(
    `UPDATE listings SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *`,
    [status, id]
  );
  return result.rows[0];
};

exports.completeListing = async (id, completedBy) => {
    const result = await db.query(
      `UPDATE listings 
       SET status = 'completed', completed_by = $1, updated_at = NOW() 
       WHERE id = $2 RETURNING *`,
      [completedBy, id]
    );
    return result.rows[0];
  };
  
  exports.unreserveListing = async (id) => {
    const result = await db.query(
      `UPDATE listings 
       SET status = 'available', reserved_by = NULL, updated_at = NOW() 
       WHERE id = $1 RETURNING *`,
      [id]
    );
    return result.rows[0];
  };
  

exports.deleteListing = async (id) => {
  await db.query('DELETE FROM listings WHERE id = $1', [id]);
};

exports.getUserRequests = async (userId) => {
  const result = await db.query(`
    SELECT r.*, u.username AS poster_name
    FROM requests r
    JOIN users u ON r.user_id = u.id
    WHERE r.user_id = $1
    ORDER BY r.created_at DESC
  `, [userId]);
  return result.rows;
};

exports.getRequestsByStatus = async (userId, status) => {
  const result = await db.query(`
    SELECT r.*, u.username AS poster_name
    FROM requests r
    JOIN users u ON r.user_id = u.id
    WHERE r.user_id = $1 AND r.status = $2
    ORDER BY r.created_at DESC
  `, [userId, status]);
  return result.rows;
};

exports.editRequest = async (id, data) => {
  const { subject, description, request_date, venue, image_path } = data;
  const result = await db.query(
    `UPDATE requests SET 
       subject = COALESCE($1, subject),
       description = COALESCE($2, description),
       request_date = COALESCE($3, request_date),
       venue = COALESCE($4, venue),
       image_path = COALESCE($5, image_path),
       updated_at = NOW()
     WHERE id = $6 RETURNING *`,
    [subject, description, request_date, venue, image_path, id]
  );
  return result.rows[0];
};

exports.updateRequestStatus = async (id, status) => {
  const result = await db.query(
    `UPDATE requests SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *`,
    [status, id]
  );
  return result.rows[0];
};

exports.deleteRequest = async (id) => {
  await db.query('DELETE FROM requests WHERE id = $1', [id]);
};

This is my profileRoutes.js:
// src/routes/profileRoutes.js
const express = require('express');
const router = express.Router();
const profileController = require('../controllers/profileController');

// My Information
router.get('/:id/info', profileController.getUserProfile);
router.put('/:id/info', profileController.updateUserInfo);
router.get('/:id/stats', profileController.getUserStats);

// My Listings
router.get('/:id/listings/available', profileController.getUserListings);
router.get('/:id/listings/reserved', profileController.getReservedListings);
router.get('/:id/listings/current', profileController.getCurrentListings);
router.get('/:id/listings/completed', profileController.getCompletedListings);
router.put('/listing/:id/approve', profileController.approveListing);
router.put('/listing/:id/reject', profileController.rejectListing);
router.put('/listing/:id/edit', profileController.editListing);
router.delete('/listing/:id', profileController.deleteListing);

// My Requests
router.get('/:id/requests/available', profileController.getUserRequests);
router.get('/:id/requests/reserved', profileController.getReservedRequests);
router.get('/:id/requests/current', profileController.getCurrentRequests);
router.get('/:id/requests/completed', profileController.getCompletedRequests);
router.put('/request/:id/approve', profileController.approveRequest);
router.put('/request/:id/reject', profileController.rejectRequest);
router.put('/request/:id/edit', profileController.editRequest);
router.delete('/request/:id', profileController.deleteRequest);

// For reserved listings: approve (moves to pending_completion)
router.put('/listing/:id/approve', profileController.approveListing);

// For reserved listings: reject (back to available)
router.put('/listing/:id/reject', profileController.rejectListing);

// New routes for pending_completion actions:
router.put('/listing/:id/complete', profileController.completeListing);
router.put('/listing/:id/unreserve', profileController.unreserveListing);

module.exports = router;

This is my database:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    otp_code VARCHAR(6),             -- For storing OTP temporarily
    otp_expires_at TIMESTAMP,        -- For OTP expiration check
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE users
ADD COLUMN latitude NUMERIC,
ADD COLUMN longitude NUMERIC;

CREATE TABLE user_stats (
    user_id INTEGER PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    total_listings_posted INTEGER DEFAULT 0,
    total_requests_posted INTEGER DEFAULT 0,
    listings_fulfilled INTEGER DEFAULT 0,     -- listings by others fulfilled by this user
    requests_fulfilled INTEGER DEFAULT 0,     -- requests by others fulfilled by this user
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE listings (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    image_path VARCHAR(255) NOT NULL,                -- Local path to the uploaded image
    item_name VARCHAR(255) NOT NULL,
    description TEXT,
    type VARCHAR(50) NOT NULL,                       -- e.g., Books, Food, Furniture, etc.
    expiry_date DATE,                                -- Nullable if not applicable
    allergy TEXT,                                    -- Nullable if not applicable
    status VARCHAR(20) DEFAULT 'available',          -- 'available', 'reserved', 'pending completion', 'completed'
    reserved_by INTEGER REFERENCES users(id),        -- User who reserved the listing (nullable)
    completed_by INTEGER REFERENCES users(id),       -- User who completed the listing (nullable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

ALTER TABLE listings
ADD COLUMN approved SMALLINT DEFAULT 0;


CREATE TABLE requests (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    subject VARCHAR(255) NOT NULL,
    request_date DATE NOT NULL,
    venue VARCHAR(255) NOT NULL,
    description TEXT,
    image_path VARCHAR(255),                         -- Optional image for the request
    status VARCHAR(20) DEFAULT 'open',               -- 'open', 'reserved', or 'completed'
    reserved_by INTEGER REFERENCES users(id),        -- User who reserved the request (nullable)
    completed_by INTEGER REFERENCES users(id),       -- User who completed the request (nullable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

ALTER TABLE requests
ADD COLUMN approved SMALLINT DEFAULT 0;



INSERT INTO listings (user_id, image_path, item_name, description, type, expiry_date, allergy, status)
VALUES
  (2, 'uploads/sample1.jpg', 'Free Books', 'A collection of gently used books available for free.', 'Books', '2025-05-01', NULL, 'available'),
  (2, 'uploads/sample2.jpg', 'Chair Giveaway', 'Comfortable chairs perfect for community events.', 'Furniture', NULL, NULL, 'available'),
  (2, 'uploads/sample3.jpg', 'Vintage Record Player', 'An old-school record player in working condition.', 'Electronics', '2025-06-15', NULL, 'available');

INSERT INTO listings (user_id, image_path, item_name, description, type, expiry_date, allergy, status)
VALUES
  (2, 'uploads/chocolates.jpg', 'Organic Apples', 'Freshly picked organic apples from a local farm.', 'Food', '2025-04-30', 'None', 'available'),
  (2, 'uploads/chocolates.jpg', 'Childrens Winter Jackets', 'Warm jackets for kids, sizes range from 5-10 years.', 'Clothes', NULL, NULL, 'reserved'),
  (2, 'uploads/chocolates.jpg', 'Old Laptop', 'Works fine, just a bit slow. Good for basic tasks.', 'Electronics', NULL, NULL, 'available'),
  (2, 'uploads/chocolates.jpg', 'Canned Goods Pack', 'Includes canned beans, tomatoes, and corn. Not expired.', 'Food', '2025-08-10', 'Soy', 'completed'),
  (2, 'uploads/chocolates.jpg', 'Story Books for Kids', 'A collection of bedtime stories for children aged 4-8.', 'Books', NULL, NULL, 'available'),
  (2, 'uploads/chocolates.jpg', 'Reusable Water Bottles', 'Set of 3 eco-friendly reusable bottles.', 'Home Items', NULL, NULL, 'reserved'),
  (2, 'uploads/chocolates.jpg', 'Homemade Cookies', 'Freshly baked cookies in different flavors.', 'Food', '2025-04-01', 'Gluten', 'available');



INSERT INTO requests (user_id, subject, request_date, venue, description, image_path, status)
VALUES
  (2, 'Help with Moving Sofa', '2025-04-15', '123 Community Center', 'Need assistance to move a heavy sofa at my place.', 'uploads/request1.jpg', 'open'),
  (2, 'Math Tutor Needed', '2025-04-20', '456 Community Center', 'Looking for a math tutor for high school level.', NULL, 'open'),
  (2, 'Gardening Assistance', '2025-05-05', '789 Community Center', 'Need help with seasonal garden maintenance.', 'uploads/request3.jpg', 'open');

INSERT INTO users (
  id, username, password_hash, email, phone, postal_code, is_verified
) VALUES (
  4, 'tampines_user', 'hashed_password_here', 'tampines@example.com', '98765432', '520201', TRUE
);
INSERT INTO listings (
  user_id, image_path, item_name, description, type, expiry_date, allergy
) VALUES
-- Listing 1
(4, 'uploads/chocolates.jpg', 'Dining Table Set', 'Used wooden dining table, seats 4.', 'Furniture', '2025-04-15', NULL),

-- Listing 2
(4, 'uploads/chocolates.jpg', 'Children Books Bundle', '10 storybooks for kids aged 6–9.', 'Books', NULL, NULL),

-- Listing 3
(4, 'uploads/chocolates.jpg', 'Surplus Rice Packets', '5kg unopened rice packets, halal-certified.', 'Food', '2025-03-30', 'None');

CREATE TABLE user_stats (
    user_id INTEGER PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    total_listings_posted INTEGER DEFAULT 0,
    total_requests_posted INTEGER DEFAULT 0,
    listings_fulfilled INTEGER DEFAULT 0,     -- listings by others fulfilled by this user
    requests_fulfilled INTEGER DEFAULT 0,     -- requests by others fulfilled by this user
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

This is my ViewListingCard.js component:
// src/components/ViewListingCard.js
import React from 'react';
import { Card, Button } from 'react-bootstrap';
import './ViewListingCard.css';

const formatDate = (dateStr) => dateStr ? new Date(dateStr).toLocaleDateString() : '';

const ViewListingCard = ({
  listing,
  onEdit,
  onDelete,
  onApprove,
  onReject,
  onComplete,
  onUnreserve
}) => {
  const {
    image_path,
    item_name,
    description,
    type,
    expiry_date,
    allergy,
    created_at,
    updated_at,
    reserved_by,
    completed_by,
    status
  } = listing;

  // Render buttons based on status
  const renderButtons = () => {
    switch(status) {
      case 'available':
        return (
          <div className="card-actions">
            <Button variant="warning" onClick={() => onEdit(listing.id)}>Edit</Button>
            <Button variant="danger" onClick={() => onDelete(listing.id)}>Delete</Button>
          </div>
        );
      case 'reserved':
        return (
          <div className="card-actions">
            <Button variant="success" onClick={() => onApprove(listing.id)}>Approve</Button>
            <Button variant="danger" onClick={() => onReject(listing.id)}>Reject</Button>
          </div>
        );
      case 'pending_completion':
        return (
          <div className="card-actions">
            <Button variant="success" onClick={() => onComplete(listing.id)}>Completed</Button>
            <Button variant="danger" onClick={() => onUnreserve(listing.id)}>Unreserve</Button>
          </div>
        );
      default:
        return null;
    }
  };

  // Render status-specific information
  const renderStatusInfo = () => {
    if (status === 'reserved' || status === 'pending_completion') {
      return <p className="status-info">Reserved at: {formatDate(updated_at)}</p>;
    } else if (status === 'completed') {
      return <p className="status-info">Completed by: {completed_by || 'N/A'}</p>;
    }
    return null;
  };

  return (
    <Card className="view-listing-card">
      <Card.Img variant="top" src={image_path} className="card-img" />
      <Card.Body>
        <Card.Title>{item_name}</Card.Title>
        <Card.Text><strong>Description:</strong> {description}</Card.Text>
        <Card.Text><strong>Type:</strong> {type}</Card.Text>
        {expiry_date && <Card.Text><strong>Expiry:</strong> {formatDate(expiry_date)}</Card.Text>}
        {allergy && <Card.Text><strong>Allergy Info:</strong> {allergy}</Card.Text>}
        <Card.Text><strong>Created:</strong> {formatDate(created_at)}</Card.Text>
        {renderStatusInfo()}
        {renderButtons()}
      </Card.Body>
    </Card>
  );
};

export default ViewListingCard;


This is my ViewListingCard.css:
/* src/components/ViewListingCard.css */
.view-listing-card {
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px var(--shadow-color);
    border-radius: 8px;
  }
  
  .view-listing-card .card-img {
    height: 180px;
    object-fit: cover;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }
  
  .view-listing-card .card-actions {
    margin-top: 1rem;
    display: flex;
    justify-content: space-around;
  }
  
  .view-listing-card .card-actions button {
    flex: 1;
    margin: 0 0.25rem;
  }
    
  .status-info {
    font-style: italic;
    color: var(--text-color);
    margin-bottom: 0.5rem;
  }
  

  This is my ProfilePage.js:
  // src/pages/ProfilePage.js
import React, { useState, useEffect } from 'react';
import { Container, Button, Badge } from 'react-bootstrap';
import './ProfilePage.css';
import UserInfoCard from '../components/UserInfoCard';
import ViewListingCard from '../components/ViewListingCard';

const ProfilePage = () => {
  const storedUser = JSON.parse(localStorage.getItem('user'));
  const userId = storedUser?.userId;
  const token = localStorage.getItem('token');

  // Main tab state: "info", "listings", "requests"
  const [activeTab, setActiveTab] = useState("info");

  // Info & Stats state
  const [userInfo, setUserInfo] = useState({});
  const [userStats, setUserStats] = useState({});

  // Listings states for all four statuses
  const [availableListings, setAvailableListings] = useState([]);
  const [reservedListings, setReservedListings] = useState([]);
  const [pendingListings, setPendingListings] = useState([]);
  const [completedListings, setCompletedListings] = useState([]);
  // Current sub-tab for listings
  const [listingsSubTab, setListingsSubTab] = useState("available");

  // Preload user info and stats on mount
  useEffect(() => {
    if (!userId) return;
    
    const fetchUserInfo = async () => {
      try {
        const res = await fetch(`${process.env.REACT_APP_API_URL}/profile/${userId}/info`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        setUserInfo(data);
      } catch (err) {
        console.error("Error fetching user info", err);
      }
    };

    const fetchUserStats = async () => {
      try {
        const res = await fetch(`${process.env.REACT_APP_API_URL}/profile/${userId}/stats`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        setUserStats(data);
      } catch (err) {
        console.error("Error fetching user stats", err);
      }
    };

    fetchUserInfo();
    fetchUserStats();
  }, [userId, token]);

  // Preload listings for all statuses as soon as userId is available
  useEffect(() => {
    if (!userId) return;
    
    const statuses = ['available', 'reserved', 'pending_completion', 'completed'];
    statuses.forEach(status => {
      fetch(`${process.env.REACT_APP_API_URL}/profile/${userId}/listings/${status}`, {
        headers: { Authorization: `Bearer ${token}` }
      })
      .then(res => res.json())
      .then(data => {
        // Optionally, ensure that only listings with the exact status are stored
        const filteredData = data.filter(listing => listing.status === status);
        if (status === 'available') setAvailableListings(filteredData);
        else if (status === 'reserved') setReservedListings(filteredData);
        else if (status === 'pending_completion') setPendingListings(filteredData);
        else if (status === 'completed') setCompletedListings(filteredData);
      })
      .catch(err => console.error(`Error fetching listings for ${status}`, err));
    });
  }, [userId, token]);

  // Handlers for Listings actions
  const handleEditListing = (listingId) => {
    const updatedData = prompt("Enter new title:");
    if(updatedData) {
      fetch(`${process.env.REACT_APP_API_URL}/profile/listing/${listingId}/edit`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({ item_name: updatedData })
      })
      .then(res => res.json())
      .then(data => {
        // Update in available listings
        setAvailableListings(prev => prev.map(item => item.id === data.id ? data : item));
      })
      .catch(err => console.error("Error editing listing", err));
    }
  };

  const handleDeleteListing = (listingId) => {
    fetch(`${process.env.REACT_APP_API_URL}/profile/listing/${listingId}`, {
      method: 'DELETE',
      headers: { Authorization: `Bearer ${token}` }
    })
    .then(() => {
      setAvailableListings(prev => prev.filter(item => item.id !== listingId));
    })
    .catch(err => console.error("Error deleting listing", err));
  };

  const handleApproveListing = (listingId) => {
    fetch(`${process.env.REACT_APP_API_URL}/profile/listing/${listingId}/approve`, {
      method: 'PUT',
      headers: { Authorization: `Bearer ${token}` }
    })
    .then(res => res.json())
    .then(data => {
      setReservedListings(prev => prev.map(item => item.id === data.id ? data : item));
    })
    .catch(err => console.error("Error approving listing", err));
  };

  const handleRejectListing = (listingId) => {
    fetch(`${process.env.REACT_APP_API_URL}/profile/listing/${listingId}/reject`, {
      method: 'PUT',
      headers: { Authorization: `Bearer ${token}` }
    })
    .then(res => res.json())
    .then(data => {
      setReservedListings(prev => prev.map(item => item.id === data.id ? data : item));
    })
    .catch(err => console.error("Error rejecting listing", err));
  };

  const handleCompleteListing = (listingId) => {
    fetch(`${process.env.REACT_APP_API_URL}/profile/listing/${listingId}/complete`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify({ completed_by: userId })
    })
    .then(res => res.json())
    .then(data => {
      setPendingListings(prev => prev.map(item => item.id === data.id ? data : item));
    })
    .catch(err => console.error("Error completing listing", err));
  };

  const handleUnreserveListing = (listingId) => {
    fetch(`${process.env.REACT_APP_API_URL}/profile/listing/${listingId}/unreserve`, {
      method: 'PUT',
      headers: { Authorization: `Bearer ${token}` }
    })
    .then(res => res.json())
    .then(data => {
      setPendingListings(prev => prev.map(item => item.id === data.id ? data : item));
    })
    .catch(err => console.error("Error unreserving listing", err));
  };

  // Determine which listings to display based on the sub‑tab
  const getDisplayedListings = () => {
    switch(listingsSubTab) {
      case "available":
        return availableListings;
      case "reserved":
        return reservedListings;
      case "pending_completion":
        return pendingListings;
      case "completed":
        return completedListings;
      default:
        return [];
    }
  };

  return (
    <Container className="profile-page">
      <h2 className="page-title">My Profile</h2>
      <div className="tabs">
        <button className={activeTab === "info" ? "active" : ""} onClick={() => setActiveTab("info")}>
          My Information
        </button>
        <button className={activeTab === "listings" ? "active" : ""} onClick={() => setActiveTab("listings")}>
          My Listings
        </button>
        <button className={activeTab === "requests" ? "active" : ""} onClick={() => setActiveTab("requests")}>
          My Requests
        </button>
      </div>

      {activeTab === "info" && (
        <div className="info-section">
          <UserInfoCard userInfo={userInfo} status="private" />
        </div>
      )}

      {activeTab === "listings" && (
        <div className="listings-section">
          <div className="sub-tabs">
            <button
              className={listingsSubTab === "available" ? "active" : ""}
              onClick={() => setListingsSubTab("available")}
            >
              Available <Badge bg="secondary">{availableListings.length}</Badge>
            </button>
            <button
              className={listingsSubTab === "reserved" ? "active" : ""}
              onClick={() => setListingsSubTab("reserved")}
            >
              Reserved <Badge bg="secondary">{reservedListings.length}</Badge>
            </button>
            <button
              className={listingsSubTab === "pending_completion" ? "active" : ""}
              onClick={() => setListingsSubTab("pending_completion")}
            >
              Pending Completion <Badge bg="secondary">{pendingListings.length}</Badge>
            </button>
            <button
              className={listingsSubTab === "completed" ? "active" : ""}
              onClick={() => setListingsSubTab("completed")}
            >
              Completed <Badge bg="secondary">{completedListings.length}</Badge>
            </button>
          </div>
          <div className="listings-content">
            {getDisplayedListings().map(listing => (
              <ViewListingCard 
                key={listing.id} 
                listing={listing}
                onEdit={handleEditListing}
                onDelete={handleDeleteListing}
                onApprove={handleApproveListing}
                onReject={handleRejectListing}
                onComplete={handleCompleteListing}
                onUnreserve={handleUnreserveListing}
              />
            ))}
          </div>
        </div>
      )}

      {activeTab === "requests" && (
        <div className="requests-section">
          {/* Your requests section remains similar */}
        </div>
      )}
    </Container>
  );
};

export default ProfilePage;


This is my ProfilePage.css:
/* src/pages/ProfilePage.css */
.profile-page {
    padding: 2rem;
    background: linear-gradient(to right, var(--background-color), #ffffff);
    min-height: 100vh;
  }
  
  .page-title {
    text-align: center;
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    font-weight: bold;
  }
  
  /* Main tabs */
  .tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 2rem;
  }
  
  .tabs button {
    background: var(--secondary-color);
    border: 1px solid #ccc;
    padding: 0.5rem 1rem;
    margin: 0 0.5rem;
    font-size: 1.1rem;
    cursor: pointer;
    border-radius: 4px;
  }
  
  .tabs button.active {
    background: var(--primary-color);
    color: #fff;
    border: 1px solid var(--primary-color);
    font-weight: bold;
  }
  
  /* Sub-tabs for listings */
  .sub-tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
  }
  
  .sub-tabs button {
    background: none;
    border: none;
    padding: 0.5rem 1rem;
    margin: 0 0.5rem;
    cursor: pointer;
    color: black;
    font-size: 1rem;
    border-bottom: 2px solid transparent;
  }
  
  .sub-tabs button.active {
    border-bottom: 2px solid red;
  }
  
  /* Content sections */
  .info-section,
  .listings-section,
  .requests-section {
    margin: 0 auto;
    max-width: 800px;
  }
  
  .listings-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  

Instructions:
- For the available tab: I should only be able to view the listings with the status available.
- I should be able to edit all the information of the listing. So make a popup with all the fields editable. 
- Make the edit button green
- Make the delete button red
- The picture is not loading, fix this also. 
- FOR ALL TABS, use a grid like format, to view maximum 2 items per row.