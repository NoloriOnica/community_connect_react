This is my database schema:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    otp_code VARCHAR(6),             -- For storing OTP temporarily
    otp_expires_at TIMESTAMP,        -- For OTP expiration check
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE users
ADD COLUMN latitude NUMERIC,
ADD COLUMN longitude NUMERIC;

CREATE TABLE user_stats (
    user_id INTEGER PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    total_listings_posted INTEGER DEFAULT 0,
    total_requests_posted INTEGER DEFAULT 0,
    listings_fulfilled INTEGER DEFAULT 0,     -- listings by others fulfilled by this user
    requests_fulfilled INTEGER DEFAULT 0,     -- requests by others fulfilled by this user
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE listings (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    image_path VARCHAR(255) NOT NULL,                -- Local path to the uploaded image
    item_name VARCHAR(255) NOT NULL,
    description TEXT,
    type VARCHAR(50) NOT NULL,                       -- e.g., Books, Food, Furniture, etc.
    expiry_date DATE,                                -- Nullable if not applicable
    allergy TEXT,                                    -- Nullable if not applicable
    status VARCHAR(20) DEFAULT 'available',          -- 'available', 'reserved', 'pending completion', 'completed'
    reserved_by INTEGER REFERENCES users(id),        -- User who reserved the listing (nullable)
    completed_by INTEGER REFERENCES users(id),       -- User who completed the listing (nullable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved SMALLINT DEFAULT 0;
    FOREIGN KEY (user_id) REFERENCES users(id)
);


CREATE TABLE requests (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    subject VARCHAR(255) NOT NULL,
    request_date DATE NOT NULL,
    venue VARCHAR(255) NOT NULL,
    description TEXT,
    image_path VARCHAR(255),                         -- Optional image for the request
    status VARCHAR(20) DEFAULT 'open',               -- 'open', 'reserved', or 'completed'
    reserved_by INTEGER REFERENCES users(id),        -- User who reserved the request (nullable)
    completed_by INTEGER REFERENCES users(id),       -- User who completed the request (nullable)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved SMALLINT DEFAULT 0;
    FOREIGN KEY (user_id) REFERENCES users(id)
);


INSERT INTO listings (user_id, image_path, item_name, description, type, expiry_date, allergy, status)
VALUES
  (2, 'uploads/sample1.jpg', 'Free Books', 'A collection of gently used books available for free.', 'Books', '2025-05-01', NULL, 'available'),
  (2, 'uploads/sample2.jpg', 'Chair Giveaway', 'Comfortable chairs perfect for community events.', 'Furniture', NULL, NULL, 'available'),
  (2, 'uploads/sample3.jpg', 'Vintage Record Player', 'An old-school record player in working condition.', 'Electronics', '2025-06-15', NULL, 'available');

INSERT INTO listings (user_id, image_path, item_name, description, type, expiry_date, allergy, status)
VALUES
  (2, 'uploads/chocolates.jpg', 'Organic Apples', 'Freshly picked organic apples from a local farm.', 'Food', '2025-04-30', 'None', 'available'),
  (2, 'uploads/chocolates.jpg', 'Childrens Winter Jackets', 'Warm jackets for kids, sizes range from 5-10 years.', 'Clothes', NULL, NULL, 'reserved'),
  (2, 'uploads/chocolates.jpg', 'Old Laptop', 'Works fine, just a bit slow. Good for basic tasks.', 'Electronics', NULL, NULL, 'available'),
  (2, 'uploads/chocolates.jpg', 'Canned Goods Pack', 'Includes canned beans, tomatoes, and corn. Not expired.', 'Food', '2025-08-10', 'Soy', 'completed'),
  (2, 'uploads/chocolates.jpg', 'Story Books for Kids', 'A collection of bedtime stories for children aged 4-8.', 'Books', NULL, NULL, 'available'),
  (2, 'uploads/chocolates.jpg', 'Reusable Water Bottles', 'Set of 3 eco-friendly reusable bottles.', 'Home Items', NULL, NULL, 'reserved'),
  (2, 'uploads/chocolates.jpg', 'Homemade Cookies', 'Freshly baked cookies in different flavors.', 'Food', '2025-04-01', 'Gluten', 'available');



INSERT INTO requests (user_id, subject, request_date, venue, description, image_path, status)
VALUES
  (2, 'Help with Moving Sofa', '2025-04-15', '123 Community Center', 'Need assistance to move a heavy sofa at my place.', 'uploads/request1.jpg', 'open'),
  (2, 'Math Tutor Needed', '2025-04-20', '456 Community Center', 'Looking for a math tutor for high school level.', NULL, 'open'),
  (2, 'Gardening Assistance', '2025-05-05', '789 Community Center', 'Need help with seasonal garden maintenance.', 'uploads/request3.jpg', 'open');

INSERT INTO users (
  id, username, password_hash, email, phone, postal_code, is_verified
) VALUES (
  4, 'tampines_user', 'hashed_password_here', 'tampines@example.com', '98765432', '520201', TRUE
);
INSERT INTO listings (
  user_id, image_path, item_name, description, type, expiry_date, allergy
) VALUES
-- Listing 1
(4, 'uploads/chocolates.jpg', 'Dining Table Set', 'Used wooden dining table, seats 4.', 'Furniture', '2025-04-15', NULL),

-- Listing 2
(4, 'uploads/chocolates.jpg', 'Children Books Bundle', '10 storybooks for kids aged 6â€“9.', 'Books', NULL, NULL),

-- Listing 3
(4, 'uploads/chocolates.jpg', 'Surplus Rice Packets', '5kg unopened rice packets, halal-certified.', 'Food', '2025-03-30', 'None');

CREATE TABLE user_stats (
    user_id INTEGER PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    total_listings_posted INTEGER DEFAULT 0,
    total_requests_posted INTEGER DEFAULT 0,
    listings_fulfilled INTEGER DEFAULT 0,     -- listings by others fulfilled by this user
    requests_fulfilled INTEGER DEFAULT 0,     -- requests by others fulfilled by this user
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


I want you to make a new page called ReservedListingsRequests.js and ReservedListingsRequests.css and the necessary backend function and routes. 
These are the features of the page:
It has 2 tabs:
- Listings 
    - 3 Tabs: Pending Approval, Approved, Completed
    Pending Approval:
    - From the localStorage user_id, it will show all the listings, where reserved_by will have the user_id but approved will be 0
    Approved:
    - From the localStorage user_id, it will show all the listings, where reserved_by will have the user_id but approved will be 1
    - The listings will now show the poster_email and number to contact.
    Completed:
    - From the localStorage user_id, it will show all the listings, where completed_by will have the user_id but approved will be 1
- Requests
    - Same structure as Listings, but we will focus on this later. Just create the tab. 


I want you to create a ViewReservedListingsCard.js component to be used for each of these tabs. Take into account the use case to show the relevant information.

You can take reference from ViewListingCard.js on the card UI.:
import React, { useState, useEffect } from 'react';
import './ViewListingCard.css';
import UserInfoCard from '../components/UserInfoCard';

const formatDate = (dateStr) =>
  dateStr ? new Date(dateStr).toLocaleDateString() : '';

const ViewListingCard = ({
  listing,
  onEdit,
  onDelete,
  onApprove,
  onReject,
  onComplete,
  onUnreserve
}) => {
  const {
    image_path,
    item_name,
    description,
    type,
    expiry_date,
    allergy,
    created_at,
    updated_at,
    reserved_by_name,    // e.g. "John Doe"
    reserved_by_id,      // e.g. 7
    completed_by_name,   // e.g. "Jane Doe"
    completed_by_id,     // e.g. 9
    status
  } = listing;

  const token = localStorage.getItem('token');

  // Prepend the API URL if needed
  const imageUrl = image_path.startsWith('http')
    ? image_path
    : `${process.env.REACT_APP_API_URL}/${image_path}`;

  // State for the UserInfo popup
  const [showUserModal, setShowUserModal] = useState(false);
  const [popupUserId, setPopupUserId] = useState(null);
  const [popupUserInfo, setPopupUserInfo] = useState(null);

  // When a reserved/completed name is clicked, fetch its public info
  const handleUserClick = (userId) => {
    setPopupUserId(userId);
    setShowUserModal(true);
  };

  useEffect(() => {
    if (popupUserId) {
      fetch(`${process.env.REACT_APP_API_URL}/profile/${popupUserId}/info`, {
        headers: { Authorization: `Bearer ${token}` }
      })
        .then((res) => res.json())
        .then((data) => setPopupUserInfo(data))
        .catch((err) => console.error("Error fetching user info", err));
    }
  }, [popupUserId, token]);

  const closeUserModal = () => {
    setShowUserModal(false);
    setPopupUserId(null);
    setPopupUserInfo(null);
  };

  // Render action buttons based on status
  const renderButtons = () => {
    switch (status) {
      case 'available':
        return (
          <div className="card-actions">
            <button className="btn btn-success" onClick={() => onEdit(listing)}>
              Edit
            </button>
            <button className="btn btn-danger" onClick={() => onDelete(listing.id)}>
              Delete
            </button>
          </div>
        );
      case 'reserved':
        return (
          <div className="card-actions">
            <button className="btn btn-success" onClick={() => onApprove(listing.id)}>
              Approve
            </button>
            <button className="btn btn-danger" onClick={() => onReject(listing.id)}>
              Reject
            </button>
          </div>
        );
      case 'pending_completion':
        return (
          <div className="card-actions">
            <button className="btn btn-success" onClick={() => onComplete(listing.id)}>
              Completed
            </button>
            <button className="btn btn-danger" onClick={() => onUnreserve(listing.id)}>
              Unreserve
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  // Render reserved or completed info with clickable user names.
  const renderStatusInfo = () => {
    if (status === 'reserved' || status === 'pending_completion') {
      return (
        <p className="status-info">
          Reserved by:{' '}
          {reserved_by_name && reserved_by_id ? (
            <button className="user-link" onClick={() => handleUserClick(reserved_by_id)}>
              {reserved_by_name}
            </button>
          ) : (
            'N/A'
          )}{' '}
          | Reserved at: {formatDate(updated_at)}
        </p>
      );
    } else if (status === 'completed') {
      return (
        <p className="status-info">
          Completed by:{' '}
          {completed_by_name && completed_by_id ? (
            <button className="user-link" onClick={() => handleUserClick(completed_by_id)}>
              {completed_by_name}
            </button>
          ) : (
            'N/A'
          )}
        </p>
      );
    }
    return null;
  };

  return (
    <div className="view-listing-card">
      <img src={imageUrl} alt={item_name} className="card-img" />
      <div className="card-body">
        <h3>{item_name}</h3>
        <p><strong>Description:</strong> {description}</p>
        <p><strong>Type:</strong> {type}</p>
        {expiry_date && <p><strong>Expiry:</strong> {formatDate(expiry_date)}</p>}
        {allergy && <p><strong>Allergy Info:</strong> {allergy}</p>}
        <p><strong>Created:</strong> {formatDate(created_at)}</p>
        {renderStatusInfo()}
        {renderButtons()}
      </div>

      {showUserModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <span className="close-button" onClick={closeUserModal}>
                &times;
              </span>
            </div>
            <div className="modal-body">
              {popupUserInfo ? (
                <UserInfoCard userInfo={popupUserInfo} status="public" />
              ) : (
                <p>Loading user information...</p>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ViewListingCard;


and ViewListingCard.css:
/* ViewListingCard.css */
.view-listing-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
    background: #fff;
    margin-bottom: 1rem;
    max-width: 250px;
  }
  
  .card-img {
    width: 100%;
    height: 150px;
    object-fit: cover;
  }
  
  .card-body {
    padding: 0.8rem;
  }
  
  .card-body h3 {
    margin: 0 0 0.5rem;
    color: #FF6961;
    font-size: 1.1rem;
  }
  
  .card-body p {
    margin: 0.3rem 0;
    color: #333;
    font-size: 0.9rem;
  }
  
  .card-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    margin-top: 0.8rem;
  }
  
  .btn {
    padding: 0.4rem 0.8rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.85rem;
  }
  
  .btn-success {
    background-color: #77DD77;
    color: #fff;
  }
  
  .btn-danger {
    background-color: #FFB347;
    color: #fff;
  }
  
  .status-info {
    font-style: italic;
    color: #555;
    margin-bottom: 0.5rem;
    font-size: 0.85rem;
  }
  
  .user-link {
    background: none;
    border: none;
    padding: 0;
    color: #007bff;
    text-decoration: underline;
    cursor: pointer;
    font-size: inherit;
  }
  
  Give me the full ViewReservedListingsCard.js, ViewReservedListingsCard.css, ReservedListingsRequests.js and ReservedListingsRequests.css

