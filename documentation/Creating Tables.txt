Summary: 
so its a website whr ppl arnd ur community (share the same community centre) can post like request or listings that they might require from others, or they can help other ppl if they see their request or lisitng

More Detailed Context:

I require a simple website that has backend frontend and a database, with a API integration. I require it in 4 weeks, so time is not an issue. I have templates of what our group requires and the requirement. When the user first registers the account, he has to input:
Username (ensure no duplicates)
Password (min 8 char)
Email address
A valid Singapore phone number
Postal code.

Once registered, an OTP will sent to the phone number for verification, afterwards user will login with username and password. User has the option to also forget the password

User will then be able to view and create request, where the below are required:
Subject name
Date of request needed
Venue
Description of request

User will also be able to view and create listings, where the below are required:
A photo of item
Name of item
Description of item
Type of item (Books, food, drinks, clothes, etc)
Expiry date of item(if applicable)
Allergy of item(if applicable)

When viewing requests and listings, user should be able to filter the requetsts based on:
Date posted
Availability
Type of item
Alphabetically

When a request or item has been completed or reserved, the system needs to update this information accordingly

Using this API:
OneMap Singapore API

Get details about a userâ€™s postal code, such as the nearest community center, to validate or enrich registration.
Free to use, very relevant for a SG-based app.
API: https://www.onemap.gov.sg/docs/
We will be using this. So based on your own postal code, you can view the listings in a radius (lets say 5km radius) around you.

These are my current tables:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    is_verified BOOLEAN DEFAULT FALSE,
    otp_code VARCHAR(6),             -- For storing OTP temporarily
    otp_expires_at TIMESTAMP,        -- For OTP expiration check
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


Give me the rest of the tables based on this use case. 